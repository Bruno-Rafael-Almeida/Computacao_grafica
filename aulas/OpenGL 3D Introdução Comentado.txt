#include <gl/glut.h>

GLfloat aspecto, angulo, rotacao;               // aspecto: variável para controlar windowsize; angulo: para projeção/perspectiva; rotação: para o objeto.
GLint largura, altura;                          //largura e altura da minha janela

void desenhaObjetos(void){
     glClear(GL_COLOR_BUFFER_BIT);              //buffer padrão (limpa a tela toda vez que a função é chamada)

     /*cubo*/
     glPushMatrix();                            //insere a matriz de transformação corrente na pilha
        glColor3f(1,0,0);                       //adiciona cor a nossa forma
        glRotatef(rotacao, 1, 1, 1);            //realiza a rotação em todos os eixos
        glutSolidCube(30);                      //cria uma forma 3d sólida
        glColor3f(0,1,0);                       //adiciona cor a nossa forma
        glutWireCube(30);                       //cria uma forma 3d de arame
     glPopMatrix();                             //retira a matriz do topo da pilha e torna esta última a matriz de transformação corrente


     /*esfera
     glPushMatrix();                            //insere a matriz de transformação corrente na pilha
        glColor3f(1,0,0);                       //adiciona cor a nossa forma
        glRotatef(rotacao, 1, 1, 1);            //realiza a rotação em todos os eixos
        glutSolidSphere(30,20,20);              //cria uma forma 3d sólida
        glColor3f(0,1,0);                       //adiciona cor a nossa forma
        glutWireSphere(30,20,20);               //cria uma forma 3d de arame
     glPopMatrix();                             //retira a matriz do topo da pilha e torna esta última a matriz de transformação corrente
     */

     /*chaleira
     glPushMatrix();                            //insere a matriz de transformação corrente na pilha
        glColor3f(1,0,0);                       //adiciona cor a nossa forma
        glRotatef(rotacao, 1, 1, 1);            //realiza a rotação em todos os eixos
        glutSolidTeapot(30);                    //cria uma forma 3d sólida
        glColor3f(0,1,0);                       //adiciona cor a nossa forma
        glutWireTeapot(30);                     //cria uma forma 3d de arame
     glPopMatrix();                             //retira a matriz do topo da pilha e torna esta última a matriz de transformação corrente
     */

     /*tetraedro
     glPushMatrix();                            //insere a matriz de transformação corrente na pilha
        glScalef(20,20,20);                     //escalona nosso objeto
        glColor3f(1,0,0);                       //adiciona cor a nossa forma
        glRotatef(rotacao, 1, 1, 1);            //realiza a rotação em todos os eixos
        glutSolidTetrahedron();                 //cria uma forma 3d sólida
        glColor3f(0,1,0);                       //adiciona cor a nossa forma
        glutWireTetrahedron();                  //cria uma forma 3d de arame
     glPopMatrix();                             //retira a matriz do topo da pilha e torna esta última a matriz de transformação corrente
     */

     /*cone
     glPushMatrix();                            //insere a matriz de transformação corrente na pilha
        glColor3f(1,0,0);                       //adiciona cor a nossa forma
        glRotatef(rotacao, 1, 1, 1);            //realiza a rotação em todos os eixos
        glutSolidCone(20,50,10,10);             //cria uma forma 3d sólida
        glColor3f(0,1,0);                       //adiciona cor a nossa forma
        glutWireCone(20,50,10,10);              //cria uma forma 3d de arame
     glPopMatrix();                             //retira a matriz do topo da pilha e torna esta última a matriz de transformação corrente
     */

     glutSwapBuffers();                         //Executa uma troca de buffer na camada em uso para a janela atual (para que consiga trabalhar com dois buffers)
}

void Inicializa (void){
    glClearColor(1,1,1,0);                          //buffer padrão; limpa a tela toda vez que a função é chamada
    angulo = 20;                                    //inicializa nossa variável angulo
}

void projetaPlano(void){
    glMatrixMode(GL_PROJECTION);                    //projeção dos pontos definidos no plano cartesiano
    glLoadIdentity();                               //carrega a projeção
    gluPerspective(angulo, aspecto, 0.1, 500);      //função que estabelece os parâmetros da Projeção Perspectiva, atualizando a matriz de projeção perspectiva.
    glMatrixMode(GL_MODELVIEW);                     //projeção do tipo modelo
    glLoadIdentity();                               //carrega a identidade de projeção de modelo
    gluLookAt(0, 300, 300, 0, 0, 0, 0, 1, 0);       //define a transformação de visualização, através dos argumentos é possível indicar a posição da câmera (para onde ela está direcionada).
}

void AlteraTamanhoJanela(GLsizei w, GLsizei h){      //faz o controle do tamanho das viewports (padrão de parâmetros, altura e largura) (800x600 no glutInitWindowSize)
    glViewport(0, 0, w, h);                          //liga viewport com o desenho, aqui eu digo qual janela eu vou utilizar
    largura = w;                                     //altura eu mantenho a mesma, pois não vou dividir a janela.
    altura = h;                                      //largura eu mantenho a mesma, pois não vou dividir a janela.
    aspecto = (float)largura / altura;               //largura dividida pela altura (utilizada para controlar a largura da janela automaticamente, independente de eu alterar a windowsize) (faz com que as janelas tenham a mesma proporção em cada viewport)
    projetaPlano();                                  //chama a função projetaPlano
}

/*função que atriui valores as nossas variáveis de movimentação x e y (dependendo da tecla pressionada) */
void teclasDirecionais(GLint tecla, GLint x, GLint y){
    switch(tecla){                                         //escolhe a tecla pressionada
            case GLUT_KEY_RIGHT: rotacao+=3;               //rotaciona nosso objeto sentido horário
            break;
            case GLUT_KEY_LEFT: rotacao-=3;                //rotaciona nosso objeto sentido anti-horário
            break;
    }
    projetaPlano();                                        //chama a função projetaPlano
    glutPostRedisplay();                                   //redesenha a cena que está na janela
}

int main(void)
{
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);       //somente um double buffer | sistema de cores RGB
     glutInitWindowSize(800,600);                       //define o tamanho da janela
     glutInitWindowPosition(300,120);                   //medidas usadas para posicionar a janela no meio da tela - isso depende da resolução do monitor
     glutCreateWindow("Exemplo Primitivas 3D");         //permite a criação de uma janela
     glutDisplayFunc(desenhaObjetos);                   //função de callback - chama a função desenhaObjetos
     glutSpecialFunc(teclasDirecionais);                //chama a função que escuta nossas teclas direcionais
     glutReshapeFunc(AlteraTamanhoJanela);              //função que altera o tamanho da janela, redesenha o tamanho da janela
     Inicializa();                                      //função que inicializa nossas variáveis
     glutMainLoop();                                    //loop infinito - escuta as informações do sistema até encerrar a aplicação
     return 0;                                          //retorna zero
}
